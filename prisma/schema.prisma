// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id      String   @id @default(uuid())
  email   String   @unique
  pseudo  String
  hash    String
  role    Role     @default(BASIC)
  Files   Files[]  @relation("UserFiles")
  Folders Folder[] @relation("UserFolders")
}

model Files {
  id           String   @id @default(uuid())
  title        String
  path         String?
  createdAt    DateTime @default(now())
  owner        User     @relation("UserFiles", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  folder       Folder   @relation("FolderFiles", fields: [folderId], references: [id], onDelete: Cascade)
  folderId     String
  size         Int      @default(0)
  cloudinaryId String?

  @@unique([title, ownerId])
}

model Folder {
  id             String           @id @default(uuid())
  title          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  owner          User             @relation("UserFolders", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  Files          Files[]          @relation("FolderFiles")
  SharedInstance SharedInstance[]

  @@unique([title, ownerId]) // Unique constraint
}

model SharedInstance {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  expiracyDate DateTime
  origin       Folder   @relation(fields: [folderId], references: [id])
  folderId     String
}

enum Role {
  BASIC
  ADMIN
}
